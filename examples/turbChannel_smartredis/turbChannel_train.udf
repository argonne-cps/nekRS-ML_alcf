#include "smartRedis.hpp"
#include "nekrs.hpp"

static dfloat ReTau;
static dfloat zLength;
static dfloat xLength;
static dfloat betaY;

#ifdef __okl__

#endif

/* User Functions */

void userf(double time)
{
  auto mesh = nrs->mesh;
  dfloat mue, rho;
  platform->options.getArgs("VISCOSITY", mue);
  platform->options.getArgs("DENSITY", rho);
  const dfloat RE_B = rho / mue;
  const dfloat DPDX = (ReTau / RE_B) * (ReTau / RE_B);

  auto o_FUx = nrs->o_NLT + 0 * nrs->fieldOffset;
  platform->linAlg->fill(mesh->Nlocal, DPDX, o_FUx);
}

void useric(nrs_t *nrs)
{
  auto mesh = nrs->mesh;

  if (platform->options.getArgs("RESTART FILE NAME").empty()) {
    const auto C = 5.17;
    const auto k = 0.41;
    const auto eps = 1e-2;
    const auto kx = 23.0;
    const auto kz = 13.0;
    const auto alpha = kx * 2 * M_PI / xLength;
    const auto beta = kz * 2 * M_PI / zLength;
    dfloat mue;
    platform->options.getArgs("VISCOSITY", mue);

    platform->linAlg->rescale(0.0, xLength, mesh->o_x, platform->comm.mpiComm);
    platform->linAlg->rescale(0.0, 1.0, mesh->o_y, platform->comm.mpiComm);
    platform->linAlg->rescale(0.0, zLength, mesh->o_z, platform->comm.mpiComm);

    auto [x, y, z] = mesh->xyzHost();

    for (int i = 0; i < mesh->Nlocal; i++) {
      y[i] = tanh(betaY * (2*y[i] - 1)) / tanh(betaY);
    }
    mesh->o_y.copyFrom(y.data());

    std::vector<dfloat> U(mesh->dim * nrs->fieldOffset, 0.0);
    for (int i = 0; i < mesh->Nlocal; i++) {
      const auto yp = (y[i] < 0) ? (1 + y[i]) * ReTau : (1 - y[i]) * ReTau;

      dfloat ux =
          1 / k * log(1 + k * yp) + (C - (1 / k) * log(k)) * (1 - exp(-yp / 11) - yp / 11 * exp(-yp / 3));
      ux *= ReTau * mue;

      U[i + 0 * nrs->fieldOffset] = ux + eps * beta * sin(alpha * x[i]) * cos(beta * z[i]);
      U[i + 1 * nrs->fieldOffset] = eps * sin(alpha * x[i]) * sin(beta * z[i]);
      U[i + 2 * nrs->fieldOffset] = -eps * alpha * cos(alpha * x[i]) * sin(beta * z[i]);
    }
    nrs->o_U.copyFrom(U.data(), U.size());

  }
}

/* UDF Functions */

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata", "ReTau", ReTau);
  platform->par->extract("casedata", "zLength", zLength);
  platform->par->extract("casedata", "xLength", xLength);
  platform->par->extract("casedata", "betaY", betaY);
}

void UDF_Setup()
{
  if (platform->options.compareArgs("CONSTANT FLOW RATE", "FALSE")) {
    nrs->userVelocitySource = &userf;
  }

  useric(nrs);

  // Initialize SmartRedis client
  smartredis::init_client(nrs);
  smartredis::init_check_run();
  smartredis::init_wallModel_train(nrs); // model for the wall shear stress
}

void UDF_ExecuteStep(double time, int tstep)
{
  // Send training data for model every set number of steps
  if (tstep%50==0 && tstep>0) {
    //postProcessing::strainRate(nrs, false, nrs->cds->o_S);
    smartredis::put_wallModel_data(nrs, tstep); // model for the wall shear stress
    MPI_Barrier(platform->comm.mpiComm);
    smartredis::put_step_num(tstep);
  }

  // Every time step check if ML training says it is time to quit
  int exit_val = smartredis::check_run();
  if (exit_val==0) {
    //platform->options.setArgs("END TIME",to_string_f(-10.0));
    nekrs::setEndTime(-10.0);
    nekrs::forceLastStep();
  }
}
