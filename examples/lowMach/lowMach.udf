#include "lowMach.hpp"
#include "ci.inc"

static dfloat P_DELTA;

static dfloat alphaRef;
static dfloat P_GAMMA;
static deviceMemory<dfloat> o_beta;
static deviceMemory<dfloat> o_kappa;

#ifdef __okl__

#include "lowMach.oudf"

#endif

void qtl(double time)
{
  lowMach::qThermalSingleComponent(time);
}

void userq(double time)
{
  auto cds = nrs->cds;
  auto mesh = cds->mesh[0];

  fillQ(mesh->Nelements, mesh->o_x, cds->o_NLT);
}

void uservp(double time)
{
  auto cds = nrs->cds;
  auto mesh = nrs->mesh;

  fillProp(mesh->Nelements,
           nrs->fieldOffset,
           nrs->cds->fieldOffset[0],
           nrs->p0th[0],
           cds->o_S,
           nrs->o_prop,
           cds->o_prop,
           o_beta,
           o_kappa);
}

void UDF_LoadKernels(deviceKernelProperties& kernelInfo)
{
  kernelInfo.define("p_DELTA") = P_DELTA;
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) {
    ciSetup(comm, options);
  }
  platform->par->extract("casedata", "p_delta", P_DELTA);
  platform->par->extract("casedata", "p_gamma", P_GAMMA);

  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    *nek::ptr<double>("p_delta") = P_DELTA;
    *nek::ptr<double>("p_gamma") = P_GAMMA;
  }
}

void UDF_Setup()
{
  nrs->userScalarSource = &userq;
  nrs->userProperties = &uservp;

  o_beta.resize(nrs->fieldOffset);
  o_kappa.resize(nrs->fieldOffset);

  // alphaRef := p0thRef/(rhoRef * cpRef * TRef)
  // translates to (gammaRef - 1)/gammaRef in case of an ideal gas
  alphaRef = (P_GAMMA - 1.0) / P_GAMMA;

  lowMach::setup(alphaRef, o_beta, o_kappa);
  nrs->userDivergence = &qtl;
}

void UDF_ExecuteStep(double time, int tstep)
{
  if (nrs->checkpointStep) {
    nrs->copyToNek(time, tstep);
    nek::userchk();
  }
  if (ciMode) {
    ciTestErrors(nrs, time, tstep);
  }
}
